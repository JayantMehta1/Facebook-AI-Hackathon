{"version":3,"sources":["logo.svg","components/Facebook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Facebook","state","isLoggedIn","userID","name","email","picture","access_token","responseFacebook","response","console","log","setState","data","url","accessToken","fetch","method","headers","body","JSON","stringify","then","text","componentClicked","fbContent","this","style","width","margin","background","padding","src","alt","appId","autoLoad","fields","scope","onClick","callback","Component","App","className","logo","window","token","href","target","rel","role","class","id","enctype","value","type","accept","multiple","integrity","crossorigin","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,2B,kOCGtBC,E,4MACjBC,MAAQ,CACJC,YAAY,EACZC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,aAAc,I,EAGlBC,iBAAmB,SAAAC,GACfC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACVV,YAAY,EACZC,OAAQM,EAASN,OACjBC,KAAMK,EAASL,KACfC,MAAOI,EAASJ,MAChBC,QAASG,EAASH,QAAQO,KAAKC,IAC/BP,aAAcE,EAASM,cAG3BL,QAAQC,IAAI,0CAA4C,EAAKV,MAAMM,cAGnES,MAAM,IAAK,CAGPC,OAAQ,OAERC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAIpBC,KAAMC,KAAKC,UAAU,CACjB,sBAA0B,EAAKpB,MAAMM,iBAE1Ce,MAAK,SAAUb,GACd,OAAOA,EAASc,UACjBD,MAAK,SAAUC,GAEdb,QAAQC,IAAI,mBAGZD,QAAQC,IAAIY,O,EAKpBC,iBAAmB,kBAAMd,QAAQC,IAAI,Y,uDAEjC,IAAIc,EA2BJ,OAxBIA,EADDC,KAAKzB,MAAMC,WAEN,yBAAKyB,MAAS,CACVC,MAAO,QACPC,OAAQ,OACRC,WAAY,SACZC,QAAS,SAET,yBAAKC,IAAKN,KAAKzB,MAAMK,QAAS2B,IAAKP,KAAKzB,MAAMG,OAC9C,wCAAcsB,KAAKzB,MAAMG,MAP7B,UAQYsB,KAAKzB,MAAMI,OAMvB,kBAAC,IAAD,CACA6B,MAAM,kBACNC,UAAU,EACVC,OAAO,qBACPC,MAAM,2HACNC,QAASZ,KAAKF,iBACde,SAAUb,KAAKlB,mBAInB,6BAAMiB,O,GAjFoBe,aC8DvBC,MA3Df,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKV,IAAKW,IAAMD,UAAU,WAAWT,IAAI,SACzC,mCACO,4CADP,wBAGA,yCAAeW,OAAOC,OACtB,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,kBAAC,EAAD,OAGF,0BAAMC,KAAK,OAAOC,MAAM,aACtB,yBAAKA,MAAM,OACP,yBAAKA,MAAM,YACP,0BAAMC,GAAG,cAAclC,OAAO,OAAOmC,QAAQ,uBACzC,kDACA,yBAAKF,MAAM,cACP,2BAAO9C,KAAK,WAEhB,yBAAK8C,MAAM,cACP,2BAAO9C,KAAK,eAAeiD,MAAM,yCAErC,yBAAKH,MAAM,cACP,2BAAOI,KAAK,OAAOlD,KAAK,OAAOmD,OAAO,UAAUC,UAAQ,KAE5D,2BAAOF,KAAK,SAASD,MAAM,YAG/B,yBAAKF,GAAG,eAAeD,MAAM,sBAAsBD,KAAK,UACxD,yBAAKE,GAAG,aAAaD,MAAM,qBAAqBD,KAAK,aASjE,4BAAQjB,IAAI,mDAAmDyB,UAAU,0EAA0EC,YAAY,cAC/J,4BAAQ1B,IAAI,4EAA4EyB,UAAU,0EAA0EC,YAAY,cACxL,4BAAQ1B,IAAI,sEAAsEyB,UAAU,0EAA0EC,YAAY,cAGlL,4BAAQ1B,IAAI,qEACZ,0BAAMgB,IAAI,aAAaF,KAAK,wEAAwEW,UAAU,0EAA0EC,YAAY,gBC/CpLC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"js/main.f9ab5aab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport FacebookLogin from 'react-facebook-login';\r\n\r\nexport default class Facebook extends Component {\r\n    state = {\r\n        isLoggedIn: false,\r\n        userID: '',\r\n        name: '',\r\n        email: '',\r\n        picture: '',\r\n        access_token: ''\r\n    };\r\n\r\n    responseFacebook = response => {\r\n        console.log(response);\r\n\r\n        this.setState({\r\n            isLoggedIn: true,\r\n            userID: response.userID,\r\n            name: response.name,\r\n            email: response.email,\r\n            picture: response.picture.data.url,\r\n            access_token: response.accessToken\r\n        });\r\n\r\n        console.log(\"I recorded the values and the token is \" + this.state.access_token);\r\n\r\n        // POST\r\n        fetch('/', {\r\n\r\n            // Specify the method\r\n            method: 'POST',\r\n\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n\r\n            // A JSON payload\r\n            body: JSON.stringify({\r\n                \"facebook_access_token\" : this.state.access_token\r\n            })\r\n        }).then(function (response) { // At this point, Flask has printed our JSON\r\n            return response.text();\r\n        }).then(function (text) {\r\n\r\n            console.log('POST response: ');\r\n\r\n            // Should be 'OK' if everything was successful\r\n            console.log(text);\r\n        });\r\n\r\n    };\r\n\r\n    componentClicked = () => console.log(\"clicked\")\r\n    render() {\r\n        let fbContent;\r\n\r\n        if(this.state.isLoggedIn) {\r\n            fbContent= (\r\n                <div style = {{\r\n                    width: '400px',\r\n                    margin: 'auto',\r\n                    background: '444444',\r\n                    padding: '20px'\r\n                }}>\r\n                    <img src={this.state.picture} alt={this.state.name} />\r\n                    <h2> Welcome {this.state.name}</h2>\r\n                    Email: {this.state.email}\r\n                </div>\r\n\r\n            );\r\n        } else {\r\n            fbContent = (\r\n                <FacebookLogin\r\n                appId=\"204445320862914\"\r\n                autoLoad={true}\r\n                fields=\"name,email,picture\"\r\n                scope=\"public_profile,user_friends,email,manage_pages,publish_pages,publish_to_groups,pages_show_list,groups_access_member_info\"\r\n                onClick={this.componentClicked}\r\n                callback={this.responseFacebook} />\r\n            )\r\n        }\r\n        return (\r\n            <div>{fbContent}</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Facebook from './components/Facebook.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <p>My Token = {window.token}</p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <Facebook />\r\n      </header>\r\n\r\n      <main role=\"main\" class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-8\">\r\n                <form id=\"upload-form\" method=\"POST\" enctype=\"multipart/form-data\">\r\n                    <h1>Facebook Hackathon</h1>\r\n                    <div class=\"form-group\">\r\n                        <input name=\"Title\" />\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <input name=\"Access Token\" value=\"Plan is to get token here as a JSON\" />\r\n                    </div>\r\n                    <div class=\"form-group\" >\r\n                        <input type=\"file\" name=\"file\" accept=\"image/*\" multiple />\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n\r\n                <div id=\"successAlert\" class=\"alert alert-success\" role=\"alert\" ></div>\r\n                <div id=\"errorAlert\" class=\"alert alert-danger\" role=\"alert\" ></div>\r\n            </div>\r\n        </div>\r\n    </main>\r\n\r\n\r\n    \r\n\r\n\r\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\r\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\r\n\r\n\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" integrity=\"sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7\" crossorigin=\"anonymous\" />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}