{"version":3,"sources":["logo.svg","Checkbox.js","components/Facebook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Checkbox","label","isSelected","onCheckboxChange","className","type","name","checked","onChange","Facebook","state","isLoggedIn","userID","email","picture","access_token","responseFacebook","response","console","log","setState","data","url","accessToken","fetch","method","headers","body","JSON","stringify","then","text","componentClicked","fbContent","this","src","alt","appId","autoLoad","fields","scope","onClick","callback","Component","checkboxList","checkboxToReturn","App","checkboxes","reduce","options","option","isActive","selectAllCheckboxes","Object","keys","forEach","checkbox","prevState","selectAll","deselectAll","handleCheckboxChange","changeEvent","target","createCheckbox","key","createCheckboxes","map","handleFormSubmit","formSubmitEvent","preventDefault","filter","push","logo","href","rel","role","class","id","enctype","value","accept","multiple","onSubmit","chosenCheckbox","integrity","crossorigin","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.ef612c28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n    <div className=\"form-check\">\r\n        <label>\r\n            <input\r\n                type=\"checkbox\"\r\n                name={label}\r\n                checked={isSelected}\r\n                onChange={onCheckboxChange}\r\n                className=\"form-check-input\"\r\n            />\r\n            {label}\r\n        </label>\r\n    </div>\r\n);\r\n\r\nexport default Checkbox;\r\n\r\n//FAILED ATTEMPTED CODES\r\n/*createCheckbox() {\r\n    let checkboxToReturn = [];\r\n    for (let i = 0; i < checkbox.length; i++) {\r\n        checkboxStatus[i] = false;\r\n        checkboxContainer[i] = (< p > Check box: <input type=\"checkbox\" checked={this.state.isChecked} onChange={this.handleOptionChange} /> </p >);\r\n        console.log(\"Check check\" + i);\r\n        checkboxToReturn.push(checkboxContainer[i]);\r\n    }\r\n    return checkboxToReturn;\r\n    //return [<input type=\"checkbox\" value=\"Testing\" />, <input type=\"checkbox\" value=\"Testing\" />];\r\n};\r\nhandleOptionChange() {\r\n    if (checkboxStatus[index] === false) {\r\n        checkboxStatus[index] = true;\r\n    }\r\n    else {\r\n        checkboxStatus[index] = false;\r\n    }\r\n    console.log(checkboxStatus[index]);\r\n    console.log(\"Confirm change! \" + index);\r\n};\r\nhandleFormSubmit = formSubmitEvent => {\r\n    formSubmitEvent.preventDefault();\r\n    let submitCheckbox = [];\r\n    for (let i = 0; i < checkbox.length; i++) {\r\n        if (checkboxStatus[i] === true) {\r\n            submitCheckbox.push(checkboxContainer[i]);\r\n        }\r\n        console.log(checkboxStatus[i]);\r\n    }\r\n    console.log(\"Checkbox length is\" + checkbox.length)\r\n    return submitCheckbox;\r\n};*/","import React, { Component } from 'react';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport './facebookDisplay.css';\r\n\r\n\r\nexport default class Facebook extends Component {\r\n    state = {\r\n        isLoggedIn: false,\r\n        userID: '',\r\n        name: '',\r\n        email: '',\r\n        picture: '',\r\n        access_token: ''\r\n    };\r\n\r\n    responseFacebook = response => {\r\n        console.log(response);\r\n\r\n        this.setState({\r\n            isLoggedIn: true,\r\n            userID: response.userID,\r\n            name: response.name,\r\n            email: response.email,\r\n            picture: response.picture.data.url,\r\n            access_token: response.accessToken\r\n        });\r\n\r\n        console.log(\"I recorded the values and the token is \" + this.state.access_token);\r\n\r\n        // POST\r\n        fetch('/', {\r\n\r\n            // Specify the method\r\n            method: 'POST',\r\n\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n\r\n            // A JSON payload\r\n            body: JSON.stringify({\r\n                \"facebook_access_token\" : this.state.access_token\r\n            })\r\n        }).then(function (response) { // At this point, Flask has printed our JSON\r\n            return response.text();\r\n        }).then(function (text) {\r\n\r\n            console.log('POST response: ');\r\n\r\n            // Should be 'OK' if everything was successful\r\n            console.log(text);\r\n        });\r\n\r\n    };\r\n\r\n    componentClicked = () => console.log(\"clicked\")\r\n    render() {\r\n        let fbContent;\r\n\r\n        if(this.state.isLoggedIn) {\r\n            fbContent= (\r\n                <div className=\"mainDisplay\">\r\n                    <img className=\"profilePic\" src={this.state.picture} alt={this.state.name} />\r\n                    <h2> Welcome {this.state.name}</h2>\r\n                    Email: {this.state.email}\r\n                </div>\r\n\r\n            );\r\n        } else {\r\n            fbContent = (\r\n                <FacebookLogin\r\n                appId=\"204445320862914\"\r\n                autoLoad={true}\r\n                fields=\"name,email,picture\"\r\n                //scope=\"public_profile,user_friends,email,manage_pages,publish_pages,publish_to_groups,pages_show_list,groups_access_member_info\"\r\n                scope=\"public_profile,user_friends,email, publish_to_groups,pages_show_list,groups_access_member_info\"\r\n                onClick={this.componentClicked}\r\n                callback={this.responseFacebook} />\r\n            )\r\n        }\r\n        return (\r\n            <div>{fbContent}</div>\r\n        )\r\n    }\r\n}","// import React from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\n// import Facebook from './components/Facebook.js'\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Facebook Artificial Intelligence Hackathon: Sentimentally Postify\r\n//         </p>\r\n//         <p>My Token = {window.token}</p>\r\n//         <Facebook />\r\n//       </header>\r\n\r\n//       <main role=\"main\" class=\"container\">\r\n//         <div class=\"row\">\r\n//             <div class=\"col-md-8\">\r\n//                 <form id=\"upload-form\" method=\"POST\" enctype=\"multipart/form-data\">\r\n//                     <h1>Facebook Hackathon: Sentimentally Postify</h1>\r\n//                     <p>\r\n//                       Please submit an image to get a list of your Facebook groups that this image would be relevant to.\r\n//                       You will have the choice to select the groups you would like to post. Approximte time is 3 minutes.\r\n//                     </p>\r\n//                     <div class=\"form-group\">\r\n//                         <input type=\"text\" name=\"Title\" placeholder=\"Enter a title\" />\r\n//                     </div>\r\n//                     <div class=\"form-group\" >\r\n//                         <input type=\"file\" name=\"file\" accept=\"image/*\" multiple />\r\n//                     </div>\r\n//                     <input type=\"submit\" value=\"Submit\" />\r\n//                     <div>\r\n//                       <h2>Thank you for using Sentimentally Postify!</h2>\r\n//                     </div>\r\n//                 </form>\r\n//             </div>\r\n//         </div>\r\n//     </main>\r\n\r\n//     <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\r\n//     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\r\n//     <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\r\n//     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react'; \r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Checkbox from './Checkbox.js';\r\nimport Facebook from './components/Facebook.js';\r\n\r\nconst checkboxList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"];\r\nlet checkboxToReturn = [];\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        checkboxes: checkboxList.reduce(\r\n            (options, option) => ({\r\n                ...options,\r\n                [option]: false\r\n            }),\r\n            {}\r\n        ),\r\n        isActive: true\r\n    };\r\n\r\n    selectAllCheckboxes = isSelected => {\r\n        Object.keys(this.state.checkboxes).forEach(checkbox => {\r\n            this.setState(prevState => ({\r\n                checkboxes: {\r\n                    ...prevState.checkboxes,\r\n                    [checkbox]: isSelected\r\n                }\r\n            }));\r\n        });\r\n    };\r\n\r\n    selectAll = () => this.selectAllCheckboxes(true);\r\n\r\n    deselectAll = () => this.selectAllCheckboxes(false);\r\n\r\n    handleCheckboxChange = changeEvent => {\r\n        const { name } = changeEvent.target;\r\n\r\n        this.setState(prevState => ({\r\n            checkboxes: {\r\n                ...prevState.checkboxes,\r\n                [name]: !prevState.checkboxes[name]\r\n            }\r\n        }));\r\n    };\r\n    createCheckbox = option => (\r\n        <Checkbox\r\n            label={option}\r\n            isSelected={this.state.checkboxes[option]}\r\n            onCheckboxChange={this.handleCheckboxChange}\r\n            key={option}\r\n        />\r\n\r\n    );\r\n\r\n    createCheckboxes = () => checkboxList.map(this.createCheckbox);\r\n\r\n\r\n    handleFormSubmit = formSubmitEvent => {\r\n        formSubmitEvent.preventDefault();\r\n        Object.keys(this.state.checkboxes)\r\n            .filter(checkbox => this.state.checkboxes[checkbox])\r\n            .forEach(checkbox => {\r\n                checkboxToReturn.push(checkbox);\r\n                console.log(checkbox, \"is selected.\");\r\n                console.log(checkboxToReturn);\r\n            });\r\n        this.setState({\r\n            isActive: false\r\n        })\r\n    };  \r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <div className=\"Intro\">\r\n                        <h1>\r\n                            Facebook AI Hackathon\r\n                        </h1>\r\n                        <p>Have an image you want to share with your Facebook Groups? \r\n                            Fear no more, Sentimentally Postify will analyze your image and reccomend\r\n                            the Facebook Groups your image would be relevent to using AI.\r\n                            A plus point, you can even directly post from here!\r\n                        </p>\r\n                        <p> Questions/Comments: Please email me at </p>\r\n                        <a\r\n                        className=\"App-link\"\r\n                        href= 'mailto: jayant.mehta@uwaterloo.ca'\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\">\r\n                        jayant.mehta@uwaterloo.ca\r\n                        </a>\r\n                    </div>\r\n        \r\n                    <Facebook />\r\n                </header>\r\n\r\n                <main role=\"main\" class=\"container\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-8\">\r\n                            <form id=\"upload-form\" method=\"POST\" enctype=\"multipart/form-data\">\r\n                                <h1>Get started with attaching your image below</h1>\r\n                                <div class=\"form-group\">\r\n                                    <input name=\"Title\" />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <input name=\"Access Token\" value=\"Plan is to get token here as a JSON\" />\r\n                                </div>\r\n                                <div class=\"form-group\" >\r\n                                    <input type=\"file\" name=\"file\" accept=\"image/*\" multiple />\r\n                                </div>\r\n                                <input id=\"submit\" type=\"submit\" value=\"Submit Image For Facebook Group Reccomendations\" />\r\n                            </form>\r\n                            <div className=\"checkboxContainer\">\r\n                                {this.state.isActive ? (\r\n                                    <form onSubmit={this.handleFormSubmit}>\r\n                                        {this.createCheckboxes()}\r\n\r\n                                        <div className=\"form-group mt-2\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                className=\"toSelectall\"\r\n                                                onClick={this.selectAll}\r\n                                            >\r\n                                                Select All\r\n                                            </button>\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                className=\"toDeselectall\"\r\n                                                onClick={this.deselectAll}\r\n                                            >\r\n                                                Deselect All\r\n                                            </button>\r\n                                            <button type=\"submit\" className=\"SavetoSubmit\">\r\n                                                Save\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                ) : null}\r\n                                <p>You chose: {checkboxToReturn.map(chosenCheckbox => (<li key={chosenCheckbox}>{chosenCheckbox}</li>))}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n\r\n                <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\r\n                <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\r\n                <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script>\r\n\r\n                <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n            </div>\r\n        );\r\n    }\r\n}   \r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}